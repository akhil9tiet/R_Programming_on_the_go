c = seq(from =1, to =20, by=3)
c
c = seq(from =1, to =100, by=3+c)
c = seq(from =1, to =100, by=(3+c))
i= c
c = seq(from =1, to =100, by=3+i
)
c = seq(from =1, to =100, by=(3+i))
clr
cl()
x= 1:5
x[3]
s = 1
a=2
c=a+s
print c
print(c)
print("Hello World from Akhil")
getwd
getwd()
getwd()
R.version()
R.version
pollutantmean("specdata", "sulfate", 1:10)
setwd("C:/Users/akhgupta/Desktop/Data Science Coursera/R programming/week2/") #sets the working directory
#getwd() #confirming the working directory
#list.files()   #checking all the files in the working directory
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
# set working directory
directory <- ("./specdata/")
# initialize a vector to hold the pollutant data
mean_vector <- c()
# find all files in the specdata folder
all_files <- as.character( list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
mean_vector <- c(mean_vector, na_removed)
}
result <- mean(mean_vector)
return(round(result, 3))
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
setwd("C:/Users/akhgupta/Desktop/Data Science Coursera/R programming/week2/") #sets the working directory
#getwd() #confirming the working directory
#list.files()   #checking all the files in the working directory
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
# set working directory
directory <- ("./specdata/")
# get the length of id vector
id_len <- length(id)
complete_data <- rep(0, id_len)
# find all files in the specdata folder
all_files <- as.character( list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
j <- 1
for (i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
complete_data[j] <- sum(complete.cases(current_file))
j <- j + 1
}
result <- data.frame(id = id, nobs = complete_data)
return(result)
}
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
setwd("C:/Users/akhgupta/Desktop/Data Science Coursera/R programming/week2/") #sets the working directory
#getwd() #confirming the working directory
#list.files()   #checking all the files in the working directory
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
directory <- ("./specdata/")
# get the complete table
complete_table <- complete("specdata", 1:332)
nobs <- complete_table$nobs
# find the valid ids
ids <- complete_table$id[nobs > threshold]
# get the length of ids vector
id_len <- length(ids)
corr_vector <- rep(0, id_len)
# find all files in the specdata folder
all_files <- as.character( list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
j <- 1
for(i in ids) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
corr_vector[j] <- cor(current_file$sulfate, current_file$nitrate, use="complete.obs")
j <- j + 1
}
result <- corr_vector
return(result)
}
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
x<-list(a=1:10, b= 11:19:1)
x<-list(a=1:10, b= 11:19:3)
x<-list(a=1:10, b= 11:19, c= 51:54)
x
lappy(x,mean)
lapply(x,mean)
sapply(x,mean)
matrix(1:20,nrow=4,ncol=5)
d<-matrix(1:20,nrow=4,ncol=5)
apply(d,sum)
lapply(d,sum)
lapply(d,mean)
lappy(d,merge(nrow))
apply(d,1,median)
d
apply(d,2,median)
x
f<-gl(3,10)
f
split(x,f)
split(x)
split(x,3)
library(datasets)
data(iris)
?iris
iris
x<-iris$virginica
x
virginica<- subset(iris,Species=='virginica')
virginica
summary(virginica)
x<-summary(virginica)
y<-subset(virginica$mean)
y<-subset(virginica, mean)
y<-data.frame(virginica$mean)
y
ness<-subs(virginica, species=='Data.Length')
ness<-subset(virginica, species=='Data.Length')
s1<-subset(virginica, species=='Sepal.Length')
virginica
si<-data.frame(virginica$Sepal.Length)
si
mean(si)
library(datasets)
data(iris)
virginica<-subset(iris,Species=='virginica')
rounds(summary(virginica), digits = 0)
library(datasets)
data(iris)
virginica<-subset(iris,Species=='virginica')
round(summary(virginica), digits = 0)
library(datasets)
data(iris)
virginica<-subset(iris,Species=='virginica')
ans<-summary(virginica)
ans
round(ans.Sepal.Lemgth.Mean, dgitis=1)
ans.Sepal.Length
ans[Mean,Sepal.Length]
round(6.588,digits=0)
class(ans)
ans[Sepal.length][4]
ans[Sepal.Length][4]
ans[1][4]
ans['Sepal.Length'][4]
library(datasets)
data(iris)
virginica<-subset(iris,Species=='virginica')
sl<-data.frame(virginica$Sepal.Length)
s1
library(datasets)
data(iris)
virginica<-subset(iris,Species=='virginica')
sl<-data.frame(virginica$Sepal.Length)
s1
sl
class(sl)
mean(sl)
split(iris,Sepal.length-list)
split(iris, "Virginica")
split(iris, "virginica")
library(datasets)
data(iris)
virginica<-subset(iris,Species=='virginica')
sl<-data.frame(virginica$Sepal.Length)
summary(sl)
source('C:/Users/akhgupta/Desktop/Data Science Coursera/R programming/week3/quiz/Q1.R')
apply(iris[,1:4],1,mean)
rowMeans(iris[,1:4])
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
mtcars
tapply(mtcars$cyl,mtcars$cyl,mean)
apply(mtcars,2,mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
library(datasets)
data(iris)
virginica<-subset(iris,Species=='virginica')
sl<-data.frame(virginica$Sepal.Length)
summary(sl)
## The first function makes a list with methods that set and get a matrix and its inverse in an intrinsic environment variable
## The second function is passed the list from the first and attempts to calculate and set its inverse.  If the inverse is already set, teh cached value is used
## makeCacheMatrix will create a matrix x, and expose three methods to set/get x and its inverse
makeCacheMatrix <- function(x = matrix()) {
cachedInv <- NULL ## initialize inverse
## set x in parent env with the desired value, if inverse is already set, get rid of it!
set <- function(userValue = matrix()) {
x <<- userValue
cachedInv <<- NULL
}
get <- function() x
##set inverse variable in parent env to desired value and return the value as a convenience
setInverse <- function(invVal) {
cachedInv <<- invVal
return(cachedInv)
}
getInverse  <- function() cachedInv
list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
## given the list variable from the first function, will first check to see if there's already a cached inverse and return
## otherwise will attempt to solve its inverse and set/return it
cacheSolve <- function(x=makeCacheMatrix(1:4, nrow=2, ncol=2), ...) { ##special matrix provided or create a test 2x2 matrix
## let's see if there's something there already
calculatedInverse <- x$getInverse()
##check if there's a cached value AND it's a matrix
if(!is.null(calculatedInverse) && is.matrix(calculatedInverse)) {
message("We found cached data and saved valuable cpus!!!")
return(calculatedInverse)
}
## otherwise get the matrix
matrixToSolve <- x$get()
## try to solve the matrix and catch errors and warnings
calculatedInverse <- tryCatch({
solve(matrixToSolve)
}, warning=function(w) {
message("This may not be the result you're looking for")
message(w)
}, error=function(e) {
message("Something went wrong solving your matrix")
message(e)
message("\n")
})
## whatever the case, set the value of the inverse (NULL if something went wrong)
message("Setting the value of inverse to:")
x$setInverse(calculatedInverse)
}
